import path from 'path';
import { readFileSync } from 'fs';
import { walk } from 'estree-walker';
import { minify } from 'html-minifier';

const htmlMinifierOptions = {
  collapseWhitespace: true,
  collapseInlineTagWhitespace: true,
  includeAutoGeneratedTags: false,
  minifyCSS: {
    format: {
      wrapAt: 200
    }
  },
  removeComments: true,
  maxLineLength: 210
};

export default function htmlTemplateLoader() {

	return {

    name: 'html-template-loader',

    transform(code, id) {

      const ast = this.parse(code);
      let _code = code;

      walk(ast, {
				enter: function({ type, specifiers, source, start, end }) {
          if (type === 'ImportDeclaration') {
            if (source.value.slice(-5) === '.html') {
              const dirname = path.dirname(id);
              const file = path.resolve(dirname, source.value);
              const content = readFileSync(file).toString();
              const minified = minify(content, htmlMinifierOptions);
              const html = `process.env.NODE_ENV === 'production' \n? \`${minified}\` \n: \`${content}\n\``;
              _code = _code.slice(0, start) + `import HTMLTemplate from '@lib/HTMLTemplate';\n var ${specifiers[0].local.name} = new HTMLTemplate(${html});\n` + _code.slice(end);
            }
          }
				},
			});

      return {
        code: _code
      };
    }

	};
}