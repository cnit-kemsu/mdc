//import { createFilter } from '@rollup/pluginutils';
import path from 'path';
import { readFileSync } from 'fs';
import { walk } from 'estree-walker';
import { minify } from 'html-minifier';

const htmlMinifierOptions = {
  collapseWhitespace: true,
  collapseInlineTagWhitespace: true,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  removeComments: true
};

// function resolvePathToLib(id) {
//   const absolutePath = path.resolve(__dirname, 'src/lib');
//   const relativePath = path.relative(id, absolutePath);
//   return relativePath.slice(3).replace(/\\/g, '/');
// }

// import HTMLTemplate from '${resolvePathToLib(id)}/HTMLTemplate';

export default function htmlTemplateLoader(options) {
  //const filter = createFilter('**/*.html');
  
	return {

    name: 'html-loader',
    
		// transform(code, id) {
		// 	if (filter(id)) {
		// 		return {
    //       code: `
    //         import HTMLTemplate from '@lib//HTMLTemplate';
    //         const html = process.env.NODE_ENV === 'production'
    //           ? ${JSON.stringify(minify(code, htmlMinifierOptions))}
    //           : ${JSON.stringify(code)};
    //         const template = new HTMLTemplate(html);
    //         export default template;
    //       `
		// 		};
		// 	}
    // },

    transform(code, id) {

      const ast = this.parse(code);
      let _code = code;

      walk(ast, {
				enter: function({ type, specifiers, source, start, end }) {
          if (type === 'ImportDeclaration') {
            if (source.value.slice(-5) === '.html') {
              const dirname = path.dirname(id);
              const htmlFile = path.resolve(dirname, source.value);
              const content = readFileSync(htmlFile).toString();
              const html = `process.env.NODE_ENV === 'production' ? ${JSON.stringify(minify(content, htmlMinifierOptions))} : ${JSON.stringify(content)}`;
              _code = _code.slice(0, start) + `import HTMLTemplate from '@lib/HTMLTemplate';\n var ${specifiers[0].local.name} = new HTMLTemplate(${html});` + _code.slice(end);
            }
          }
				},
			});

      return {
        code: _code
      };
    }

	};
}